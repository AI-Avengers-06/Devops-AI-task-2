name: CI/CD Pipeline

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres
  POSTGRES_DB: pipeline_dashboard

jobs:
  build-and-test:
    runs-on: ubuntu-latest

    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_USER: ${{ env.POSTGRES_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRES_PASSWORD }}
          POSTGRES_DB: ${{ env.POSTGRES_DB }}
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
    - uses: actions/checkout@v4

    - name: Set up Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '20'

    # Backend build and test
    - name: Install backend dependencies
      working-directory: ./backend
      run: npm install

    - name: Build backend
      working-directory: ./backend
      run: npm run build

    - name: Initialize test database
      run: |
        PGPASSWORD=${{ env.POSTGRES_PASSWORD }} psql -h localhost -U ${{ env.POSTGRES_USER }} -d ${{ env.POSTGRES_DB }} -f backend/src/db/init.sql

    - name: Run backend tests
      working-directory: ./backend
      run: npm test
      env:
        DATABASE_URL: postgres://${{ env.POSTGRES_USER }}:${{ env.POSTGRES_PASSWORD }}@localhost:5432/${{ env.POSTGRES_DB }}

    # Frontend build and test
    - name: Install frontend dependencies
      working-directory: ./frontend
      run: npm install

    - name: Build frontend
      working-directory: ./frontend
      run: npm run build

    - name: Run frontend tests
      working-directory: ./frontend
      run: npm test

  docker:
    needs: build-and-test
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'

    steps:
    - uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Build and run containers
      run: |
        docker-compose build
        docker-compose up -d
        sleep 30  # Wait for containers to be ready

    - name: Check container status
      run: docker-compose ps

    - name: Test API endpoints
      run: |
        curl -f http://localhost:3000/api/pipelines || exit 1
        curl -f http://localhost:5173 || exit 1

    - name: Show container logs if failure
      if: failure()
      run: docker-compose logs

    - name: Clean up
      if: always()
      run: docker-compose down -v

    - name: Deploy
      if: github.ref == 'refs/heads/main'
      run: |
        echo "Add deployment steps here"
